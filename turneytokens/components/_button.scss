@mixin btn($bg-color: #e2e2e2) {  // provides a default value in the parameter
    text-decoration: none;
    cursor: pointer;
    display: inline-block;
    border: 0;
    padding: $base-padding $base-padding * 2;
    border-radius: $base-border-radius;
    background-color: $bg-color;
}

// mixins provide a great way to store reusable code (instead of repeating it over and over again).
// For example here we store the base styles of a button in a mixin. We can pass in parameters too.

.btn {
    @include btn;
}


@each $key, $val in $colors {
    .btn-#{$key} {
        @include btn($val);

        &:hover {
            background-color: lighten($val, 5%)
        }
    }
    
    .btn-outlined-#{$key} {
        @include btn(#fff);
        border: $base-border-thickness solid $val;
        &:hover {
            background-color: $val;
        }
    }

    .btn-complement-#{$key} {
        @include btn($val);
        color: light-comp($val);

        &:hover {
            color: $val;
            background-color: light-comp($val);
        }
    }
}
